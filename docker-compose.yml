version: '3'


services:
  # ---
  # Stream Capture Service
  # ---
  stream_capture_service:
    build:
      context: ./stream-capture-service
      dockerfile: ./Dockerfile
    restart: on-failure
    volumes:
      - ./stream-capture-service:/usr/src/app
    environment:
      - CHANNEL_NAME=${CHANNEL_NAME} # the stream to capture
      - LC_ALL=C
    depends_on:
      - kafka
  # ---
  # Stream Metadata Service
  # ---
  stream_metadata_service:
    build:
      context: ./stream-metadata-service
      dockerfile: ./Dockerfile
    restart: always
    volumes:
      - ./stream-metadata-service:/usr/src/app
    environment:
      - CHANNEL_NAME=${CHANNEL_NAME} # the stream to watch metadata
      - LC_ALL=C
    depends_on:
      - kafka
  # ---
  # Stream Timestamp Service
  # ---
  stream_timestamp_service:
    build:
      context: ./stream-timestamp-service
      dockerfile: ./Dockerfile
    restart: always
    volumes:
      - ./stream-timestamp-service:/usr/src/app
    depends_on:
      - kafka
      - stream_metadata_service
  # ---
  # Video Clip Service
  # ---
  video_clip_service:
    build:
      context: ./video-clip-service
      dockerfile: ./Dockerfile
    restart: always
    volumes:
      - ./video-clip-service:/app
    depends_on:
      - kafka
      - stream_timestamp_service
      # - stream_capture_service
  # ---
  # Highlight Worker Service
  # ---
  highlight_worker_service:
    build:
      context: ./highlight-worker-service
      dockerfile: ./Dockerfile
    restart: always
    volumes:
      - ./highlight-worker-service:/usr/src/app
    depends_on:
      - kafka
      - video_clip_service
  # ---
  # Streamable API Hook
  # ---
  streamable_api_hook:
    build:
      context: ./streamable-api-hook
      dockerfile: ./Dockerfile
    restart: always
    volumes:
      - ./highlight-worker-service/clips:/usr/src/app/clips
      - ./streamable-api-hook:/usr/src/app
    environment:
      - STREAMABLE_USER=${STREAMABLE_USER}
      - STREAMABLE_PASS=${STREAMABLE_PASS}
    depends_on:
      - kafka
  # ---
  # Apache Zookeeper (Kafka dependency)
  # ---
  zookeeper:
    image: 'bitnami/zookeeper:3.6.1'
    restart: always
    ports:
      - '2181:2181'
    volumes:
      - zookeeper_data:/bitnami
      # - ./_volumes/zookeeper_data:/bitnami
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  # ---
  # Apache Kafka
  # ---
  kafka:
    image: 'wurstmeister/kafka:2.12-2.5.0'
    restart: always
    ports:
      - '9092:9092'
    volumes:
      - kafka_data:/kafka
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      # KAFKA_LISTENERS: PLAINTEXT://:9092
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LOG_RETENTION_MS: 600000 # 10 minutes
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 60000 # 1 minute
    depends_on:
      - zookeeper
  # ---
  # Redis
  # ---
  redis:
    image: 'redis:6.0.1-alpine'
    restart: always
    ports:
      - '6379:6379'


volumes:
  zookeeper_data:
  kafka_data:
